<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络编程——C-实现socket通信-TCP-高并发之epoll模式</title>
      <link href="/2020/06/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bepoll%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/06/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bepoll%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>相关链接：<a href="https://blog.csdn.net/buknow/article/details/81157002" target="_blank" rel="noopener">TCP连接与释放</a>、<a href="https://blog.csdn.net/buknow/article/details/106664612" target="_blank" rel="noopener">网络编程——C++实现socket通信(TCP)</a></p><p>相关函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">服务端：</span><br><span class="line">socket()</span><br><span class="line">bind()</span><br><span class="line">listen()</span><br><span class="line">epoll_create()  高并发poll模式</span><br><span class="line">epoll_ctl()</span><br><span class="line">epoll_wait()</span><br><span class="line">accept()</span><br><span class="line">read() 或 recv()等</span><br><span class="line">write() 或 send()等</span><br><span class="line">close()</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">socket()</span><br><span class="line">connect()</span><br><span class="line">write() 或 send()等</span><br><span class="line">read() 或 recv()等</span><br><span class="line">close()</span><br></pre></td></tr></table></figure><a id="more"></a><p>着重说明下==epoll函数==用法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">epoll是增强版的poll，可以看做event poll，通过红黑树和内核维护的等待队列等结构实现的事件触发等机制实现的高并发，解决了select和poll未能解决的遍历所有fd来查找响应的缺陷，同时可以通过非阻塞IO模式实现更高的服务性能。</span><br><span class="line"></span><br><span class="line">/proc/sys/fs/epoll/max_user_watches:这个文件中的值表示用户能注册到epoll实例中的最大文件描述符的数量限制(也就是硬件本身支持的最大数量限制)</span><br><span class="line"></span><br><span class="line">关键函数</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;<span class="comment">//创建一个epoll实例(本质是红黑树),也占用个文件描述符，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</span></span><br><span class="line"><span class="comment">//size用来告诉内核这个监听的数目一共有多大，自从Linux 2.6.8开始，size参数被忽略，但是依然要大于0。</span></span><br><span class="line"></span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</span><br><span class="line">将监听的文件描述符添加到epoll实例中，实例代码为将标准输入文件描述符添加到epoll中</span><br><span class="line">第一个参数是epoll_create()的返回值，</span><br><span class="line">第二个参数表示动作，用三个宏来表示：</span><br><span class="line">EPOLL_CTL_ADD：注册新的fd到epfd中；</span><br><span class="line">EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</span><br><span class="line">EPOLL_CTL_DEL：从epfd中删除一个fd；</span><br><span class="line">第三个参数是需要监听的fd，</span><br><span class="line">第四个参数是告诉内核需要监听什么事，<span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>结构如下：</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line"><span class="keyword">__uint32_t</span> events; <span class="comment">// Epoll events </span></span><br><span class="line"><span class="keyword">epoll_data_t</span> data; <span class="comment">// User data variable </span></span><br><span class="line">&#125;;</span><br><span class="line">events可以是以下几个宏的集合(常用的IN/OUT/ERR/ET)：</span><br><span class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class="line">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class="line">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class="line">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。</span><br><span class="line"><span class="keyword">epoll_data_t</span>联合体定义如下：(注意是联合体)</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">void</span> *ptr;<span class="comment">//可以传递任意类型数据，常用来传 回调函数</span></span><br><span class="line">  <span class="keyword">int</span> fd;<span class="comment">//可以直接传递客户端的fd</span></span><br><span class="line">  <span class="keyword">uint32_t</span> u32;</span><br><span class="line">  <span class="keyword">uint64_t</span> u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span></span><br><span class="line">等待epoll事件从epoll实例中发生， 并返回事件总数以及传出对应文件描述符</span><br><span class="line">参数events用来从内核得到事件的集合，</span><br><span class="line">参数maxevents表示每次能处理的最大事件数，告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，</span><br><span class="line">参数timeout是超时时间（毫秒，<span class="number">0</span>会立即返回，<span class="number">-1</span>将不确定，也有说法说是永久阻塞）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：epoll的两种触发模式：</span><br><span class="line">边沿触发vs水平触发</span><br><span class="line">epoll事件有两种模型，边沿触发：edge-triggered (ET)， 水平触发：level-triggered (LT)</span><br><span class="line">水平触发(level-triggered),是epoll的默认模式</span><br><span class="line">socket接收缓冲区不为空 有数据可读 读事件一直触发</span><br><span class="line">socket发送缓冲区不满 可以继续写入数据 写事件一直触发</span><br><span class="line">边沿触发(edge-triggered)</span><br><span class="line">socket的接收缓冲区状态变化时触发读事件，即空的接收缓冲区刚接收到数据时触发读事件</span><br><span class="line">socket的发送缓冲区状态变化时触发写事件，即满的缓冲区刚空出空间时触发读事件</span><br><span class="line">边沿触发仅触发一次，水平触发会一直触发。</span><br><span class="line">开源库:libevent 采用水平触发， nginx 采用边沿触发</span><br></pre></td></tr></table></figure><p>注意：每当服务端连接断开后，进入TIME_WAIT状态，等待2msl时间之后才能重新使用IP和端口，否则在bind时就会报错。要解决这个问题可以在程序开始时调用端口复用函数setsockopt。原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</span></span><br><span class="line">    <span class="comment">/*　sockfd：标识一个套接口的描述字。</span></span><br><span class="line"><span class="comment">　　    level：选项定义的层次；支持SOL_SOCKET、IPPROTO_TCP、IPPROTO_IP和IPPROTO_IPV6。</span></span><br><span class="line"><span class="comment">　　    optname：需设置的选项。</span></span><br><span class="line"><span class="comment">　　    optval：指针，指向存放选项值的缓冲区</span></span><br><span class="line"><span class="comment">　　    optlen：optval缓冲区长度。</span></span><br><span class="line"><span class="comment">　　    返回值：  成功返回0，失败返回 -1.  */</span></span><br><span class="line">　　    </span><br><span class="line"></span><br><span class="line">实际调用：</span><br><span class="line"> setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br></pre></td></tr></table></figure><p>==废话不多说，上源码！==</p><blockquote><p>实现的功能：客户端C向服务端S发送一串字符数据，S端会对字符串做转大写操作然后回发给C端。直接在咱们Tcp_Server.cpp基础上修改代码</p></blockquote><p><strong>服务端</strong>Epoll_Server.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;//epoll头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_listenfd, i_connfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_sersock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>, <span class="title">events</span>[<span class="title">MAXSIZE</span>];</span></span><br><span class="line"><span class="keyword">int</span> epfd, nCounts;<span class="comment">//epfd:epoll实例句柄, nCounts:epoll_wait返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立socket套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_sersock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_sersock));</span><br><span class="line">st_sersock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line">st_sersock.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY转换过来就是0.0.0.0，泛指本机的意思，也就是表示本机的所有IP，因为有些机子不止一块网卡，多网卡的情况下，这个就表示所有网卡ip地址的意思。</span></span><br><span class="line">st_sersock.sin_port = htons(IP_PORT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(i_listenfd,(struct sockaddr*)&amp;st_sersock, <span class="keyword">sizeof</span>(st_sersock)) &lt; <span class="number">0</span>) <span class="comment">//将套接字绑定IP和端口用于监听</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listen(i_listenfd, <span class="number">20</span>) &lt; <span class="number">0</span>)<span class="comment">//设定可同时排队的客户端最大连接个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((epfd = epoll_create(MAXSIZE)) &lt; <span class="number">0</span>)<span class="comment">//创建epoll实例</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"epoll_create Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = i_listenfd;</span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epfd, EPOLL_CTL_ADD, i_listenfd, &amp;ev) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"epoll_ctl Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======waiting for client's request======\n"</span>);</span><br><span class="line"><span class="comment">//准备接受客户端连接</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((nCounts = epoll_wait(epfd, events, MAXSIZE, <span class="number">-1</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"epoll_ctl Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nCounts == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"time out, No data!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCounts; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp_epoll_recv_fd = events[i].data.fd;</span><br><span class="line"><span class="keyword">if</span>(tmp_epoll_recv_fd == i_listenfd)<span class="comment">//有客户端连接请求</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i_connfd = accept(i_listenfd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)<span class="comment">//阻塞等待客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client[%d], welcome!\n"</span>, i_connfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = i_connfd;</span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epfd, EPOLL_CTL_ADD, i_connfd, &amp;ev) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"epoll_ctl Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//若是已连接的客户端发来数据请求</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接受客户端发来的消息并作处理(小写转大写)后回写给客户端</span></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span> ,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(tmp_epoll_recv_fd, msg, MAXSIZE)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( nrecvSize == <span class="number">0</span>)<span class="comment">//read返回0代表对方已close断开连接。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client has disconnected!\n"</span>);</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_DEL, tmp_epoll_recv_fd, <span class="literal">NULL</span>);</span><br><span class="line">close(tmp_epoll_recv_fd);  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recvMsg:%s"</span>, msg);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; msg[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">msg[i] = <span class="built_in">toupper</span>(msg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(write(tmp_epoll_recv_fd, msg, <span class="built_in">strlen</span>(msg)+<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">close(i_listenfd);</span><br><span class="line">close(epfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong>Epoll_Client.cpp (直接用咱们Tcp_Client.cpp就可以)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i_sockfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SigCatch</span><span class="params">(<span class="keyword">int</span> sigNum)</span><span class="comment">//信号捕捉函数(捕获Ctrl+C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i_sockfd != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(i_sockfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bye~! Will Exit...\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_clnsock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signal(SIGINT, SigCatch);<span class="comment">//注册信号捕获函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_clnsock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_clnsock));</span><br><span class="line">st_clnsock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line"><span class="comment">//IP地址转换(直接可以从物理字节序的点分十进制 转换成网络字节序)</span></span><br><span class="line"><span class="keyword">if</span>(inet_pton(AF_INET, IP_ADDR, &amp;st_clnsock.sin_addr) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">st_clnsock.sin_port = htons(IP_PORT);<span class="comment">//端口转换(物理字节序到网络字节序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(connect(i_sockfd, (struct sockaddr*)&amp;st_clnsock, <span class="keyword">sizeof</span>(st_clnsock)) &lt; <span class="number">0</span>)<span class="comment">//主动向设置的IP和端口号的服务端发出连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======connect to server, sent data======\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环输入，向服务端发送数据并接受服务端返回的数据</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(msg, MAXSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"will send: %s"</span>, msg);</span><br><span class="line"><span class="keyword">if</span>(write(i_sockfd, msg, MAXSIZE) &lt; <span class="number">0</span>)<span class="comment">//发送数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(i_sockfd, msg, MAXSIZE)) &lt; <span class="number">0</span>)<span class="comment">//接受数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nrecvSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Service Close!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server return: %s\n"</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
            <tag> epoll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程——C++实现socket通信(TCP)高并发之poll模式.md</title>
      <link href="/2020/06/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bpoll%E6%A8%A1%E5%BC%8F-md/"/>
      <url>/2020/06/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bpoll%E6%A8%A1%E5%BC%8F-md/</url>
      
        <content type="html"><![CDATA[<p>相关链接：<a href="https://blog.csdn.net/buknow/article/details/81157002" target="_blank" rel="noopener">TCP连接与释放</a>、<a href="https://blog.csdn.net/buknow/article/details/106664612" target="_blank" rel="noopener">网络编程——C++实现socket通信(TCP)</a></p><p>相关函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">服务端：</span><br><span class="line">socket()</span><br><span class="line">bind()</span><br><span class="line">listen()</span><br><span class="line">poll()  高并发poll模式</span><br><span class="line">accept()</span><br><span class="line">read() 或 recv()等</span><br><span class="line">write() 或 send()等</span><br><span class="line">close()</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">socket()</span><br><span class="line">connect()</span><br><span class="line">write() 或 send()等</span><br><span class="line">read() 或 recv()等</span><br><span class="line">close()</span><br></pre></td></tr></table></figure><a id="more"></a><p>着重说明下==poll函数==用法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">跟select功能类似，可以设置的同时监听上限会更多,poll效率更高,调用完poll函数之后不会清空监听的事件集合.</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line">-fds: 是一个<span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>结构类型的数组，用于存放需要检测其状态的<span class="title">socket</span>描述符。结构体类型定义如下：</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> fd;<span class="comment">//文件描述符</span></span><br><span class="line"><span class="keyword">short</span> events;<span class="comment">//等待的需要监听的事件类型,常用取值为POLLIN(监听读)/POLLOUT(写)/POLLERR(异常)。如fds[0].events = POLLIN</span></span><br><span class="line"><span class="keyword">short</span> revents;<span class="comment">//实际发生了的事件，也就是返回结果。值的范围同events: POLLIN/POLLOUT/POLLERR</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">-nfds: <span class="keyword">nfds_t</span>类型的参数，用于标记数组fds中的结构体元素的总数量；</span><br><span class="line">-timeout: 是poll函数调用阻塞的时间，单位：毫秒。传值<span class="number">-1</span>表示阻塞监听，<span class="number">0</span>表示不阻塞立即返回，&gt;<span class="number">0</span>表示阻塞等待timeout的时间</span><br><span class="line"></span><br><span class="line">返回值：&gt;<span class="number">0</span>：数组fds中准备好读、写或出错状态的那些socket描述符的总数量，fds数组中有状态的fd的revents被赋值传出，可以通过跟POLLIN/POLLOUT/POLLERR等标志通过位与&amp;来判断，如<span class="keyword">if</span>(fds[n].revents &amp; POLLIN)</span><br><span class="line">=<span class="number">0</span>:数组fds中没有任何socket描述符准备好读、写，或出错，revents会被清空</span><br><span class="line">=<span class="number">-1</span>：poll函数调用失败，同时会自动设置全局变量errno.</span><br></pre></td></tr></table></figure><p>注意：每当服务端连接断开后，进入TIME_WAIT状态，等待2msl时间之后才能重新使用IP和端口，否则在bind时就会报错。要解决这个问题可以在程序开始时调用端口复用函数setsockopt。原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</span></span><br><span class="line">    <span class="comment">/*　sockfd：标识一个套接口的描述字。</span></span><br><span class="line"><span class="comment">　　    level：选项定义的层次；支持SOL_SOCKET、IPPROTO_TCP、IPPROTO_IP和IPPROTO_IPV6。</span></span><br><span class="line"><span class="comment">　　    optname：需设置的选项。</span></span><br><span class="line"><span class="comment">　　    optval：指针，指向存放选项值的缓冲区</span></span><br><span class="line"><span class="comment">　　    optlen：optval缓冲区长度。</span></span><br><span class="line"><span class="comment">　　    返回值：  成功返回0，失败返回 -1.  */</span></span><br><span class="line">　　    </span><br><span class="line"></span><br><span class="line">实际调用：</span><br><span class="line"> setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br></pre></td></tr></table></figure><p>==废话不多说，上源码！==</p><blockquote><p>实现的功能：客户端C向服务端S发送一串字符数据，S端会对字符串做转大写操作然后回发给C端。直接在咱们Tcp_Server.cpp基础上修改代码</p></blockquote><p><strong>服务端</strong>Poll_Server.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;//poll头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_listenfd, i_connfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_sersock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//记录fd数组中最大fd对应的下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pofds</span>[<span class="title">MAXSIZE</span>];</span><span class="comment">//结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(n : pofds)<span class="comment">//将所有数组中的fd设为-1，方便以后填充</span></span><br><span class="line">&#123;</span><br><span class="line">n.fd = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立socket套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_sersock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_sersock));</span><br><span class="line">st_sersock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line">st_sersock.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY转换过来就是0.0.0.0，泛指本机的意思，也就是表示本机的所有IP，因为有些机子不止一块网卡，多网卡的情况下，这个就表示所有网卡ip地址的意思。</span></span><br><span class="line">st_sersock.sin_port = htons(IP_PORT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(i_listenfd,(struct sockaddr*)&amp;st_sersock, <span class="keyword">sizeof</span>(st_sersock)) &lt; <span class="number">0</span>) <span class="comment">//将套接字绑定IP和端口用于监听</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listen(i_listenfd, <span class="number">20</span>) &lt; <span class="number">0</span>)<span class="comment">//设定可同时排队的客户端最大连接个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen fd: %d\n"</span>, i_listenfd);</span><br><span class="line"></span><br><span class="line">pofds[index].fd = i_listenfd;<span class="comment">//先赋值</span></span><br><span class="line">pofds[index].events = POLLIN;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======waiting for client's request======\n"</span>);</span><br><span class="line"><span class="comment">//准备接受客户端连接</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nCount = poll(pofds, index+<span class="number">1</span>, <span class="number">-1</span>);<span class="comment">//阻塞监听</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------poll监听到可读事件计数:%d\n"</span>,nCount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(pofds[i].revents &amp; POLLIN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//不在监听事件中则跳过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------即将处理监听到的 pofds[%d]: %d\n"</span>, i, pofds[i].fd);</span><br><span class="line">nCount--;<span class="comment">//每处理一次就自减1</span></span><br><span class="line"><span class="keyword">if</span>(pofds[i].fd == i_listenfd)<span class="comment">//监听到有客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i_connfd = accept(i_listenfd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)<span class="comment">//阻塞等待客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client[%d], welcome!\n"</span>, i_connfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; MAXSIZE; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pofds[n].fd == <span class="number">-1</span>)<span class="comment">//将新客户端fd加入数组中</span></span><br><span class="line">&#123;</span><br><span class="line">pofds[n].fd = i_connfd;</span><br><span class="line">pofds[n].events = POLLIN;</span><br><span class="line">index &lt; n ? index = n : <span class="literal">true</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"将新客户端fd加入数组中. fd:%d, index:%d\n"</span>, pofds[n].fd, index);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//监听到已连接的客户端发来的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接受客户端发来的消息并作处理(小写转大写)后回写给客户端</span></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span> ,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(pofds[i].fd, msg, MAXSIZE)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( nrecvSize == <span class="number">0</span>)<span class="comment">//read返回0代表对方已close断开连接。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client has disconnected!\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(index == i)<span class="comment">//如果是最大的下标的客户端退出，则index-1</span></span><br><span class="line">&#123;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">pofds[i].fd = <span class="number">-1</span>;<span class="comment">//清除数组中相应位置</span></span><br><span class="line">close(pofds[i].fd);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recvMsg:%s"</span>, msg);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; msg[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">msg[i] = <span class="built_in">toupper</span>(msg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(write(pofds[i].fd, msg, <span class="built_in">strlen</span>(msg)+<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">close(i_listenfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong>Poll_Client.cpp (直接用咱们Tcp_Client.cpp就可以)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i_sockfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SigCatch</span><span class="params">(<span class="keyword">int</span> sigNum)</span><span class="comment">//信号捕捉函数(捕获Ctrl+C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i_sockfd != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(i_sockfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bye~! Will Exit...\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_clnsock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signal(SIGINT, SigCatch);<span class="comment">//注册信号捕获函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_clnsock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_clnsock));</span><br><span class="line">st_clnsock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line"><span class="comment">//IP地址转换(直接可以从物理字节序的点分十进制 转换成网络字节序)</span></span><br><span class="line"><span class="keyword">if</span>(inet_pton(AF_INET, IP_ADDR, &amp;st_clnsock.sin_addr) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">st_clnsock.sin_port = htons(IP_PORT);<span class="comment">//端口转换(物理字节序到网络字节序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(connect(i_sockfd, (struct sockaddr*)&amp;st_clnsock, <span class="keyword">sizeof</span>(st_clnsock)) &lt; <span class="number">0</span>)<span class="comment">//主动向设置的IP和端口号的服务端发出连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======connect to server, sent data======\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环输入，向服务端发送数据并接受服务端返回的数据</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(msg, MAXSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"will send: %s"</span>, msg);</span><br><span class="line"><span class="keyword">if</span>(write(i_sockfd, msg, MAXSIZE) &lt; <span class="number">0</span>)<span class="comment">//发送数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(i_sockfd, msg, MAXSIZE)) &lt; <span class="number">0</span>)<span class="comment">//接受数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nrecvSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Service Close!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server return: %s\n"</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
            <tag> poll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程——C++实现socket通信(TCP)高并发之select模式.md</title>
      <link href="/2020/06/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bselect%E6%A8%A1%E5%BC%8F-md/"/>
      <url>/2020/06/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94C-%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8Bselect%E6%A8%A1%E5%BC%8F-md/</url>
      
        <content type="html"><![CDATA[<p>相关链接：<a href="https://blog.csdn.net/buknow/article/details/81157002" target="_blank" rel="noopener">TCP连接与释放</a>、<a href="https://blog.csdn.net/buknow/article/details/106664612" target="_blank" rel="noopener">网络编程——C++实现socket通信(TCP)</a></p><p>相关函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">服务端：</span><br><span class="line">socket()</span><br><span class="line">bind()</span><br><span class="line">listen()</span><br><span class="line">FD_ZERO()等辅助函数</span><br><span class="line">select() 高并发select模式</span><br><span class="line">accept()</span><br><span class="line">read() 或 recv()等</span><br><span class="line">write() 或 send()等</span><br><span class="line">close()</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">socket()</span><br><span class="line">connect()</span><br><span class="line">write() 或 send()等</span><br><span class="line">read() 或 recv()等</span><br><span class="line">close()</span><br></pre></td></tr></table></figure><a id="more"></a><p>着重说明下==select函数==及==辅助函数==用法说明。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">调用select()函数之后，select()函数会清空它所检测的socket描述符集合，所以每次调用select()之前都必须把socket描述符重新加入到待检测的集合中。</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br><span class="line">-nfds: 监听的最大文件描述符值+<span class="number">1</span></span><br><span class="line">-readfds: 监听socket可读事件的集合的指针 (经常用到的)</span><br><span class="line">-writefds: 监听socket可写事件的集合的指针</span><br><span class="line">-execptfds:监听socket异常事件的集合的指针</span><br><span class="line">-timeout: 设置select监听的超时时间，<span class="literal">NULL</span>表示阻塞监听，<span class="number">0</span>表示不阻塞立即返回，&gt;<span class="number">0</span>表示阻塞等待timeout时长</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">处理三个集合fd_set(实质是位图)的辅助函数：</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//清除集合set中指定fd的位</span></span><br><span class="line">       <span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//判断set中指定fd的位是否为真(也就是fd是否在集合set中)</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//设置集合set中指定fd的位</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;<span class="comment">//清空集合set</span></span><br></pre></td></tr></table></figure><p>注意：每当服务端连接断开后，进入TIME_WAIT状态，等待2msl时间之后才能重新使用IP和端口，否则在bind时就会报错。要解决这个问题可以在程序开始时调用端口复用函数setsockopt。原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</span></span><br><span class="line">    <span class="comment">/*　sockfd：标识一个套接口的描述字。</span></span><br><span class="line"><span class="comment">　　    level：选项定义的层次；支持SOL_SOCKET、IPPROTO_TCP、IPPROTO_IP和IPPROTO_IPV6。</span></span><br><span class="line"><span class="comment">　　    optname：需设置的选项。</span></span><br><span class="line"><span class="comment">　　    optval：指针，指向存放选项值的缓冲区</span></span><br><span class="line"><span class="comment">　　    optlen：optval缓冲区长度。</span></span><br><span class="line"><span class="comment">　　    返回值：  成功返回0，失败返回 -1.  */</span></span><br><span class="line">　　    </span><br><span class="line"></span><br><span class="line">实际调用：</span><br><span class="line"> setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br></pre></td></tr></table></figure><p>==废话不多说，上源码！==</p><blockquote><p>实现的功能：客户端C向服务端S发送一串字符数据，S端会对字符串做转大写操作然后回发给C端。直接在咱们Tcp_Server.cpp基础上修改代码</p></blockquote><p><strong>服务端</strong>Select_Server.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;//select() 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_listenfd, i_connfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_sersock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxfd = <span class="number">-1</span>;<span class="comment">//记录最大fd</span></span><br><span class="line">fd_set readfds;</span><br><span class="line"><span class="keyword">int</span> allfds[MAXSIZE];<span class="comment">//存放当前所有可用的fd的数组</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//记录fd数组中最大fd对应的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i : allfds)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立socket套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_sersock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_sersock));</span><br><span class="line">st_sersock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line">st_sersock.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY转换过来就是0.0.0.0，泛指本机的意思，也就是表示本机的所有IP，因为有些机子不止一块网卡，多网卡的情况下，这个就表示所有网卡ip地址的意思。</span></span><br><span class="line">st_sersock.sin_port = htons(IP_PORT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(i_listenfd,(struct sockaddr*)&amp;st_sersock, <span class="keyword">sizeof</span>(st_sersock)) &lt; <span class="number">0</span>) <span class="comment">//将套接字绑定IP和端口用于监听</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listen(i_listenfd, <span class="number">20</span>) &lt; <span class="number">0</span>)<span class="comment">//设定可同时排队的客户端最大连接个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allfds[index] = maxfd = i_listenfd;<span class="comment">//先赋值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======waiting for client's request======\n"</span>);</span><br><span class="line"><span class="comment">//准备接受客户端连接</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">FD_ZERO(&amp;readfds);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;= index; i++)</span><br><span class="line">&#123;</span><br><span class="line">FD_SET(allfds[i], &amp;readfds);<span class="comment">//加入可读事件集合中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------allfds中的元素allfds[%d]:%d\n"</span>, i, allfds[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nCount = select(maxfd+<span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);<span class="comment">//select,返回共监听到有多少个fd上有事件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------select监听到可读事件计数:%d\n"</span>,nCount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!FD_ISSET(allfds[i], &amp;readfds))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//不在监听事件中则跳过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------即将处理监听到的 allfds[%d]: %d\n"</span>, i, allfds[i]);</span><br><span class="line"><span class="keyword">if</span>(allfds[i] == i_listenfd)<span class="comment">//监听到有客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line">nCount--;</span><br><span class="line"><span class="keyword">if</span>((i_connfd = accept(i_listenfd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)<span class="comment">//阻塞等待客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client[%d], welcome!\n"</span>, i_connfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; MAXSIZE; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(allfds[n] == <span class="number">-1</span>)<span class="comment">//将新客户端fd加入数组中</span></span><br><span class="line">&#123;</span><br><span class="line">allfds[n] = i_connfd;</span><br><span class="line">maxfd &lt; i_connfd ? maxfd = i_connfd : <span class="literal">true</span> ;</span><br><span class="line">index &lt; n ? index = n : <span class="literal">true</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"将新客户端fd加入数组中. fd:%d, maxfd:%d, index:%d\n"</span>, allfds[n], maxfd, index);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//监听到已连接的客户端发来的数据</span></span><br><span class="line">&#123;</span><br><span class="line">nCount--;</span><br><span class="line"><span class="comment">//接受客户端发来的消息并作处理(小写转大写)后回写给客户端</span></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span> ,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(allfds[i], msg, MAXSIZE)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( nrecvSize == <span class="number">0</span>)<span class="comment">//read返回0代表对方已close断开连接。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client has disconnected!\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(maxfd == allfds[i])</span><br><span class="line">&#123;</span><br><span class="line">maxfd--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index == i)</span><br><span class="line">&#123;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">close(allfds[i]);  <span class="comment">//</span></span><br><span class="line">FD_CLR(allfds[i], &amp;readfds);<span class="comment">//清除readfds中对它的监听事件</span></span><br><span class="line">allfds[i] = <span class="number">-1</span>;<span class="comment">//清除数组中相应位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recvMsg:%s"</span>, msg);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; msg[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">msg[i] = <span class="built_in">toupper</span>(msg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(write(allfds[i], msg, <span class="built_in">strlen</span>(msg)+<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">close(i_listenfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong>Select_Client.cpp (直接用咱们Tcp_Client.cpp就可以)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i_sockfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SigCatch</span><span class="params">(<span class="keyword">int</span> sigNum)</span><span class="comment">//信号捕捉函数(捕获Ctrl+C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i_sockfd != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(i_sockfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bye~! Will Exit...\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_clnsock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signal(SIGINT, SigCatch);<span class="comment">//注册信号捕获函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_clnsock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_clnsock));</span><br><span class="line">st_clnsock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line"><span class="comment">//IP地址转换(直接可以从物理字节序的点分十进制 转换成网络字节序)</span></span><br><span class="line"><span class="keyword">if</span>(inet_pton(AF_INET, IP_ADDR, &amp;st_clnsock.sin_addr) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">st_clnsock.sin_port = htons(IP_PORT);<span class="comment">//端口转换(物理字节序到网络字节序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(connect(i_sockfd, (struct sockaddr*)&amp;st_clnsock, <span class="keyword">sizeof</span>(st_clnsock)) &lt; <span class="number">0</span>)<span class="comment">//主动向设置的IP和端口号的服务端发出连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======connect to server, sent data======\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环输入，向服务端发送数据并接受服务端返回的数据</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(msg, MAXSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"will send: %s"</span>, msg);</span><br><span class="line"><span class="keyword">if</span>(write(i_sockfd, msg, MAXSIZE) &lt; <span class="number">0</span>)<span class="comment">//发送数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(i_sockfd, msg, MAXSIZE)) &lt; <span class="number">0</span>)<span class="comment">//接受数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nrecvSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Service Close!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server return: %s\n"</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
            <tag> select </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程——CPP实现socket通信(TCP)</title>
      <link href="/2020/06/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94CPP%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP/"/>
      <url>/2020/06/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94CPP%E5%AE%9E%E7%8E%B0socket%E9%80%9A%E4%BF%A1-TCP/</url>
      
        <content type="html"><![CDATA[<p>相关链接：<a href="https://blog.csdn.net/buknow/article/details/81157002" target="_blank" rel="noopener">TCP连接与释放</a></p><p>相关函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">服务端：</span><br><span class="line">socket()</span><br><span class="line">bind()</span><br><span class="line">listen()</span><br><span class="line">accept()</span><br><span class="line">read() 或 recv()等</span><br><span class="line">write() 或 send()等</span><br><span class="line">close()</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">socket()</span><br><span class="line">connect()</span><br><span class="line">write() 或 send()等</span><br><span class="line">read() 或 recv()等</span><br><span class="line">close()</span><br></pre></td></tr></table></figure><a id="more"></a><p>注意：每当服务端连接断开后，进入TIME_WAIT状态，等待2msl时间之后才能重新使用IP和端口，否则在bind时就会报错。要解决这个问题可以在程序开始时调用端口复用函数setsockopt。原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</span></span><br><span class="line">    <span class="comment">/*　sockfd：标识一个套接口的描述字。</span></span><br><span class="line"><span class="comment">　　    level：选项定义的层次；支持SOL_SOCKET、IPPROTO_TCP、IPPROTO_IP和IPPROTO_IPV6。</span></span><br><span class="line"><span class="comment">　　    optname：需设置的选项。</span></span><br><span class="line"><span class="comment">　　    optval：指针，指向存放选项值的缓冲区</span></span><br><span class="line"><span class="comment">　　    optlen：optval缓冲区长度。</span></span><br><span class="line"><span class="comment">　　    返回值：  成功返回0，失败返回 -1.  */</span></span><br><span class="line">　　    </span><br><span class="line"></span><br><span class="line">实际调用：</span><br><span class="line"> setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(on));</span><br></pre></td></tr></table></figure><p>==废话不多说，上源码！==</p><blockquote><p>实现的功能：客户端C向服务端S发送一串字符数据，S端会对字符串做转大写操作然后回发给C端</p></blockquote><p><strong>服务端</strong>TCP_Server.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_listenfd, i_connfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_sersock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立socket套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_sersock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_sersock));</span><br><span class="line">st_sersock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line">st_sersock.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY转换过来就是0.0.0.0，泛指本机的意思，也就是表示本机的所有IP，因为有些机子不止一块网卡，多网卡的情况下，这个就表示所有网卡ip地址的意思。</span></span><br><span class="line">st_sersock.sin_port = htons(IP_PORT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(i_listenfd,(struct sockaddr*)&amp;st_sersock, <span class="keyword">sizeof</span>(st_sersock)) &lt; <span class="number">0</span>) <span class="comment">//将套接字绑定IP和端口用于监听</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listen(i_listenfd, <span class="number">20</span>) &lt; <span class="number">0</span>)<span class="comment">//设定可同时排队的客户端最大连接个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======waiting for client's request======\n"</span>);</span><br><span class="line"><span class="comment">//准备接受客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i_connfd = accept(i_listenfd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)<span class="comment">//阻塞等待客户端连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client[%d], welcome!\n"</span>, i_connfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环 接受客户端发来的消息并作处理(小写转大写)后回写给客户端</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span> ,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(i_connfd, msg, MAXSIZE)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( nrecvSize == <span class="number">0</span>)<span class="comment">//read返回0代表对方已close断开连接。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"client has disconnected!\n"</span>);</span><br><span class="line">close(i_connfd);  <span class="comment">//</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recvMsg:%s"</span>, msg);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; msg[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">msg[i] = <span class="built_in">toupper</span>(msg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(write(i_connfd, msg, <span class="built_in">strlen</span>(msg)+<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">close(i_connfd);</span><br><span class="line">close(i_listenfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong>TCP_Client.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_ADDR <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i_sockfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SigCatch</span><span class="params">(<span class="keyword">int</span> sigNum)</span><span class="comment">//信号捕捉函数(捕获Ctrl+C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i_sockfd != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(i_sockfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bye~! Will Exit...\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">st_clnsock</span>;</span></span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> nrecvSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signal(SIGINT, SigCatch);<span class="comment">//注册信号捕获函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i_sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span>)<span class="comment">//建立套接字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st_clnsock, <span class="number">0</span>, <span class="keyword">sizeof</span>(st_clnsock));</span><br><span class="line">st_clnsock.sin_family = AF_INET;  <span class="comment">//IPv4协议</span></span><br><span class="line"><span class="comment">//IP地址转换(直接可以从物理字节序的点分十进制 转换成网络字节序)</span></span><br><span class="line"><span class="keyword">if</span>(inet_pton(AF_INET, IP_ADDR, &amp;st_clnsock.sin_addr) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">st_clnsock.sin_port = htons(IP_PORT);<span class="comment">//端口转换(物理字节序到网络字节序)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(connect(i_sockfd, (struct sockaddr*)&amp;st_clnsock, <span class="keyword">sizeof</span>(st_clnsock)) &lt; <span class="number">0</span>)<span class="comment">//主动向设置的IP和端口号的服务端发出连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"======connect to server, sent data======\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//循环输入，向服务端发送数据并接受服务端返回的数据</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(msg, MAXSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"will send: %s"</span>, msg);</span><br><span class="line"><span class="keyword">if</span>(write(i_sockfd, msg, MAXSIZE) &lt; <span class="number">0</span>)<span class="comment">//发送数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">if</span>((nrecvSize = read(i_sockfd, msg, MAXSIZE)) &lt; <span class="number">0</span>)<span class="comment">//接受数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read Error: %s (errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nrecvSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Service Close!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Server return: %s\n"</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++知识点</title>
      <link href="/2020/04/22/CPlusPlus%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/04/22/CPlusPlus%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>修饰变量，说明该变量不可以被改变；</li><li>修饰指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）；</li><li>修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；</li><li>修饰成员函数，说明该成员函数内不能修改成员变量。<a id="more"></a></li></ol><h2 id="const的指针与引用"><a href="#const的指针与引用" class="headerlink" title="const的指针与引用"></a>const的指针与引用</h2><ul><li>指针<ul><li>指向常量的指针</li><li>自身是常量的指针</li></ul></li><li>引用<ul><li>指向常量的引用</li></ul></li></ul><p><code>（为了方便记忆可以想成）被 const 修饰（在 const 后面）的值不可改变，如下文使用例子中的 p2、p3</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a;                <span class="comment">// 常对象成员，只能在初始化列表赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    A() : a(<span class="number">0</span>) &#123; &#125;;</span><br><span class="line">    A(<span class="keyword">int</span> x) : a(x) &#123; &#125;;        <span class="comment">// 初始化列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// const可用于对重载函数的区分</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>;             <span class="comment">// 普通成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>;       <span class="comment">// 常成员函数，不得修改类中的任何数据成员的值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    A b;                        <span class="comment">// 普通对象，可以调用全部成员函数、更新常成员变量</span></span><br><span class="line">    <span class="keyword">const</span> A a;                  <span class="comment">// 常对象，只能调用常成员函数</span></span><br><span class="line">    <span class="keyword">const</span> A *p = &amp;a;            <span class="comment">// 指针变量，指向常对象</span></span><br><span class="line">    <span class="keyword">const</span> A &amp;q = a;             <span class="comment">// 指向常对象的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针</span></span><br><span class="line">    <span class="keyword">char</span> greeting[] = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="keyword">char</span>* p1 = greeting;                <span class="comment">// 指针变量，指向字符数组变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* p2 = greeting;          <span class="comment">// 指针变量，指向字符数组常量（const 后面是 char，说明指向的字符（char）不可改变）</span></span><br><span class="line">    <span class="keyword">char</span>* <span class="keyword">const</span> p3 = greeting;          <span class="comment">// 自身是常量的指针，指向字符数组变量（const 后面是 p3，说明 p3 指针自身不可改变）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p4 = greeting;    <span class="comment">// 自身是常量的指针，指向字符数组常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> Var)</span></span>;           <span class="comment">// 传递过来的参数在函数内不可变</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* Var)</span></span>;         <span class="comment">// 参数指针所指内容为常量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function3</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">const</span> Var)</span></span>;         <span class="comment">// 参数指针为常量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function4</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Var)</span></span>;          <span class="comment">// 引用参数在函数内为常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数返回值</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">function5</span><span class="params">()</span></span>;      <span class="comment">// 返回一个常数</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="title">function6</span><span class="params">()</span></span>;     <span class="comment">// 返回一个指向常量的指针变量，使用：const int *p = function6();</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="keyword">const</span> <span class="title">function7</span><span class="params">()</span></span>;     <span class="comment">// 返回一个指向变量的常指针，使用：int* const p = function7();</span></span><br></pre></td></tr></table></figure><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ol><li>修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main 函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。</li><li>修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命名空间里的函数重名，可以将函数定位为 static。</li><li>修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。</li><li>修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问<code>非静态成员</code>。</li></ol><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><ol><li>this 指针是一个隐含于每一个<code>非静态成员函数</code>中的特殊指针。它指向调用该成员函数的那个对象。</li><li>当对一个对象调用成员函数时，编译程序先将对象的地址赋给 this 指针，然后调用成员函数，每次成员函数存取数据成员时，都隐式使用 this 指针。</li><li>当一个成员函数被调用时，自动向它传递一个隐含的参数，该参数是一个指向这个成员函数所在的对象的指针。</li><li>this 指针被隐含地声明为: ClassName *const this，这意味着<code>不能给 this 指针赋值</code>；在 ClassName 类的 const 成员函数中，this 指针的类型为：const ClassName* const，这说明不能对 this 指针所指向的这种对象是不可修改的（即不能对这种对象的数据成员进行赋值操作）；</li><li>this 并不是一个常规变量，而是个右值，所以<code>不能取得 this 的地址（不能 &amp;this）</code>。</li><li>在以下场景中，经常需要显式引用 this 指针：<ul><li>为实现对象的链式引用；</li><li>为避免对同一对象进行赋值操作；</li><li>在实现一些数据结构时，如 list。</li></ul></li></ol><h1 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h1><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ol><li>相当于把内联函数里面的内容写在调用内联函数处；</li><li>相当于不用执行进入函数的步骤，直接执行函数体；</li><li>相当于宏，却<code>比宏多了类型检查</code>，真正具有函数特性；</li><li>编译器一般<code>不内联包含循环、递归、switch 等复杂操作</code>的内联函数；</li><li>在类声明中定义的函数，<code>除了虚函数的其他函数</code>都会自动隐式地当成内联函数。<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明1（加 inline，建议使用）</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">functionName</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second,...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明2（不加 inline）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">functionName</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second,...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">functionName</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second,...)</span> </span>&#123;<span class="comment">/****/</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类内定义，隐式内联</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">doA</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;         <span class="comment">// 隐式内联</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外定义，需要显式内联</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">doA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> A::doA() &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;   <span class="comment">// 需要显式内联</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="编译器对-inline-函数的处理步骤"><a href="#编译器对-inline-函数的处理步骤" class="headerlink" title="编译器对 inline 函数的处理步骤"></a>编译器对 inline 函数的处理步骤</h2><ol><li>将 inline 函数体复制到 inline 函数调用点处；</li><li>为所用 inline 函数中的局部变量分配内存空间；</li><li>将 inline 函数的的输入参数和返回值映射到调用方法的局部变量空间中；</li><li>如果 inline 函数有多个返回点，将其转变为 inline 函数代码块末尾的分支（使用 GOTO）。<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li><li>内联函数<code>同宏函数一样将在被调用处进行代码展开</code>，省去了参数压栈、栈帧开辟与回收，结果返回等，从而<code>提高程序运行速度</code>。</li><li>内联函数相比宏函数来说，在代码展开时，会做<code>安全检查或自动类型转换（同普通函数）</code>，而宏定义则不会。</li><li>在类中声明同时定义的成员函数，自动转化为内联函数，因此内联函数<code>可以访问类的成员变量</code>，宏定义则不能。</li><li>内联函数<code>在运行时可调试</code>，而宏定义不可以。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li><code>代码膨胀</code>。内联是以代码膨胀（复制）为代价，消除函数调用带来的开销。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</li><li><code>内联函数无法随着函数库升级而升级</code>。inline函数的改变需要重新编译，不像 non-inline 可以直接链接。</li><li><code>是否内联，程序员不可控。</code>内联函数只是对编译器的建议，是否对函数内联，最终决定权在于编译器。<h2 id="虚函数（virtual）可以是内联函数（inline）吗？"><a href="#虚函数（virtual）可以是内联函数（inline）吗？" class="headerlink" title="虚函数（virtual）可以是内联函数（inline）吗？"></a>虚函数（virtual）可以是内联函数（inline）吗？</h2><ul><li>虚函数可以是内联函数，内联是可以修饰虚函数的，但是当虚函数表现多态性的时候不能内联。</li><li><code>内联是在编译期间编译器内联，而虚函数的多态性在运行期</code>，编译器无法知道运行期调用哪个代码，因此虚函数表现为多态性时（运行期）不可以内联。</li><li>inline virtual 唯一可以内联的时候是：编译器知道所调用的对象是哪个类（如 Base::who()），这只有在编译器具有实际对象而不是对象的指针或引用时才会发生。</li></ul></li></ol><ul><li>例子：虚函数内联使用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am Base\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">who</span><span class="params">()</span>  <span class="comment">// 不写inline时隐式内联</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am Derived\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 此处的虚函数 who()，是通过类（Base）的具体对象（b）来调用的，编译期间就能确定了，所以它可以是内联的，但最终是否内联取决于编译器。 </span></span><br><span class="line">    Base b;</span><br><span class="line">    b.who();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。  </span></span><br><span class="line">    Base *ptr = <span class="keyword">new</span> Derived();</span><br><span class="line">    ptr-&gt;who();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为Base有虚析构函数（virtual ~Base() &#123;&#125;），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。</span></span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    ptr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> i = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">volatile</span> i = <span class="number">13</span>;</span><br></pre></td></tr></table></figure><p>像上面的例子，没有volatile关键字，release版本的编译器会作优化，跳过前面的赋值。但如果有volatile关键字，则编译器每句都会执行。</p><ul><li>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素（操作系统、硬件、其它线程等）更改。所以使用 volatile 告诉编译器不应对这样的对象进行优化。</li><li>volatile 关键字声明的变量，每次访问时都必须从内存中取出值（没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值）</li><li>const 可以是 volatile （如只读的状态寄存器）</li><li>指针可以是 volatile</li></ul><h1 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h1><p>断言，是宏，而非函数。assert 宏的原型定义在 &lt;assert.h&gt;（C）、&lt;cassert&gt;（C++）中，其作用是如果它的条件返回错误，则终止程序执行。assert只在DEBUG生效。可以通过定义 NDEBUG 来关闭 assert，但是需要在源代码的开头，include &lt;assert.h&gt; 之前。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NDEBUG          <span class="comment">// 加上这行，则 assert 不可用</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">assert( p != <span class="literal">NULL</span> );    <span class="comment">// assert 不可用</span></span><br></pre></td></tr></table></figure><h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof()"></a>sizeof()</h1><p>sizeof()是关键字，而不是函数！</p><ul><li>sizeof 对数组，得到整个数组所占空间大小()。</li><li>sizeof 对指针，得到指针本身所占空间大小。</li></ul><h1 id="pragma-pack-n"><a href="#pragma-pack-n" class="headerlink" title="#pragma pack(n)"></a>#pragma pack(n)</h1><p>设定结构体、联合以及类成员变量以 n 字节方式对齐</p><p>#pragma pack(n) 使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push)  <span class="comment">// 保存对齐状态</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)     <span class="comment">// 设定为 4 字节对齐</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> m1;</span><br><span class="line">    <span class="keyword">double</span> m4;</span><br><span class="line">    <span class="keyword">int</span> m3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)   <span class="comment">// 恢复对齐状态</span></span></span><br></pre></td></tr></table></figure><h1 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h1><ul><li>被 extern 限定的函数或变量是 extern 类型的</li><li>被 extern “C” 修饰的变量和函数是按照 C 语言方式编译和链接的</li></ul><p>extern “C” 的作用是让 C++ 编译器将 extern “C” 声明的代码当作 C 语言代码处理，可以避免 C++ 因符号修饰导致代码不能和C语言库中的符号进行链接的问题。</p><p>extern “C” 使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">int</span>, <span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a>struct和class</h1><p>struct 更适合看成是一个数据结构的实现体，class 更适合看成是一个对象的实现体。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>默认访问权限不同：struct是public的，class是private的</li><li>默认继承权限不同：struct是public的，class是private的</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下C++访问web服务——使用libcurl库调用http接口发送解析json数据</title>
      <link href="/2019/12/10/C-%E9%80%9A%E8%BF%87libcurl%E5%BA%93%E8%B0%83%E7%94%A8http%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/12/10/C-%E9%80%9A%E8%BF%87libcurl%E5%BA%93%E8%B0%83%E7%94%A8http%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>　这两天由于一些原因研究了研究如何在客户端C++代码中调用web服务端接口，需要访问url，并传入json数据，拿到返回值，并解析。<br>　现在的情形是远程服务端的接口参数和返回类型都是json的字符串。所以我们主要做的就是：连接远程url、找到接口，将基本类型的数据封装成json数据传入接口，然后获取返回值，并解析返回的json数据。<br>　这里需要用到的库就有url库、json库，大致了解了，接下来就要下载包进行配置了。</p><a id="more"></a><h2 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h2><p>首先需要安装curl库和json库，安装详情如下：</p><ul><li>安装curl库<blockquote><p>1.下载：wget  <a href="http://curl.haxx.se/download/curl-7.38.0.tar.gz" target="_blank" rel="noopener">http://curl.haxx.se/download/curl-7.38.0.tar.gz</a>   (如果下载不了，直接在浏览器打开这个网址下载下来)<br>2.解压：tar -xzvf curl-7.38.0.tar.gz<br>3.安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> curl-7.38.0</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>4.查看/usr/include目录下有没有curl文件夹，没有的话需要将解压包/curl-7.38.0/include中的curl拷贝过去<br>5.查看/usr/local/lib/目录下有没有libcurl.so.4.3.0和libcurl.so，没有的话将/curl-7.38.0/lib/.libs/libcurl.so.4.3.0拷贝到/usr/local/lib/下，并建立软链接：ln -s libcurl.so.4.3.0 libcurl.so<br>6.将路径加入系统查找路径中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf.d/libc.conf </span><br><span class="line">将目录/usr/<span class="built_in">local</span>/lib写入该文件中</span><br><span class="line">执行sudo ldconfig</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>7 安装完成</p></blockquote><ul><li>安装json库<blockquote><p>1.下载JsonCpp：<a href="http://sourceforge.net/projects/jsoncpp/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/jsoncpp/files/</a><br>2.下载scons:<a href="http://sourceforge.net/projects/scons/files/scons/2.1.0/scons-2.1.0.tar.gz/download" target="_blank" rel="noopener">http://sourceforge.net/projects/scons/files/scons/2.1.0/scons-2.1.0.tar.gz/download</a><br>3.解压scons-2.1.0.tar.gz：tar -zvxf scons-2.1.0.tar.gz<br>4.进入解压目录scons-2.1.0，执行命令：sudo python setup.py install<br>5.解压jsoncpp:tar -zvxf jsoncpp-src-0.5.0.tar.gz<br>6.进入jsoncpp解压目录下，执行命令：sudo scons platform=linux-gcc<br>7.将/jsoncpp-src-0.5.0/include/目录下的json文件夹拷贝到/usr/include/<br>8.将/jsoncpp-src-0.5.0/libs/linux-gcc-4.9.1/目录下的libjson_linux-gcc-4.9.1_libmt.so和libjson_linux-gcc-4.9.1_libmt.a 拷贝到/usr/local/lib/,并为了方便使用，将其重命名为libjson.so</p></blockquote></li></ul><h2 id="三、编写代码"><a href="#三、编写代码" class="headerlink" title="三、编写代码"></a>三、编写代码</h2><p>代码名称：getInfo.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curl/easy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;json/json.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">size_t</span> push_string(<span class="keyword">void</span>* buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, <span class="keyword">void</span>* stream)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">data</span><span class="params">((<span class="keyword">const</span> <span class="keyword">char</span>*)buffer, (<span class="keyword">size_t</span>) size * nmemb)</span></span>;</span><br><span class="line">    *((<span class="built_in">stringstream</span>*) stream) &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> size*nmemb;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">send_post</span><span class="params">(<span class="keyword">char</span> *url, <span class="keyword">char</span> *param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stringstream</span> res_str;</span><br><span class="line"> </span><br><span class="line">CURL *curl_handle = <span class="literal">NULL</span>;</span><br><span class="line">CURLcode curl_res;</span><br><span class="line">curl_res = curl_global_init(CURL_GLOBAL_ALL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  printf("param is: %s\n", param);</span></span><br><span class="line"><span class="keyword">if</span>(curl_res == CURLE_OK)</span><br><span class="line">&#123;</span><br><span class="line">curl_handle = curl_easy_init();</span><br><span class="line"><span class="keyword">if</span>(curl_handle != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_URL, url);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDSIZE, <span class="built_in">strlen</span>(param));</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, param);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYHOST, <span class="number">0</span>);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_TIMEOUT, <span class="number">30</span>);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_CONNECTTIMEOUT, <span class="number">10L</span>);</span><br><span class="line">curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, push_string);</span><br><span class="line">                        curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, &amp;res_str);</span><br><span class="line">                        curl_easy_setopt(curl_handle, CURLOPT_HEADER, <span class="number">0L</span>);</span><br><span class="line">            </span><br><span class="line">                        <span class="class"><span class="keyword">struct</span> <span class="title">curl_slist</span> *<span class="title">pList</span> = <span class="title">NULL</span>;</span></span><br><span class="line">                        pList = curl_slist_append(pList,<span class="string">"Content-Type: application/json;charset=utf-8"</span>);</span><br><span class="line"> </span><br><span class="line">                        curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, pList);</span><br><span class="line">                        curl_res = curl_easy_perform(curl_handle);</span><br><span class="line"><span class="keyword">if</span>(curl_res != CURLE_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"curl_easy_perform error, err_msg:[%ld]\n"</span>, curl_res);</span><br><span class="line">&#125;</span><br><span class="line">curl_easy_cleanup(curl_handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"CURL ERROR : %s"</span>, curl_easy_strerror(curl_res));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> str_json = res_str.str();</span><br><span class="line"><span class="keyword">char</span> *str;</span><br><span class="line">        str = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(str, str_json.c_str());</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解析json格式的返回值  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ret_info</span><span class="params">(<span class="keyword">char</span> *res_str, <span class="keyword">char</span> *flag, <span class="keyword">char</span> *password, <span class="keyword">char</span> *msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Json::Reader json_reader;</span><br><span class="line">Json::Value json_value;</span><br><span class="line"><span class="keyword">if</span>(json_reader.parse(res_str, json_value))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> flag1 = json_value[<span class="string">"id"</span>].asString();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> password1 = json_value[<span class="string">"password"</span>].asString();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> msg1 = json_value[<span class="string">"msg"</span>].asString();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">strcpy</span>(flag, flag1.c_str());</span><br><span class="line"><span class="built_in">strcpy</span>(password, password1.c_str());</span><br><span class="line"><span class="built_in">strcpy</span>(msg, msg1.c_str());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> url[<span class="number">100</span>] = <span class="string">"http://172.16.10.138:8888/ServerX/doRecog"</span>;<span class="comment">//服务端url</span></span><br><span class="line"><span class="keyword">char</span> param[<span class="number">500</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//输入参数</span></span><br><span class="line"><span class="keyword">char</span> *res_str;<span class="comment">//返回数据</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//构造json格式的参数</span></span><br><span class="line">        Json::Value item;</span><br><span class="line">item[<span class="string">"username"</span>] = Json::Value(<span class="string">"test"</span>);</span><br><span class="line">   item[<span class="string">"paramdata"</span>] = Json::Value(<span class="string">"==2==NULL=="</span>);</span><br><span class="line">   item[<span class="string">"signdata"</span>] = Json::Value(<span class="string">"NULL"</span>);</span><br><span class="line">   item[<span class="string">"imgtype"</span>] = Json::Value(<span class="string">"jpg"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> str = item.toStyledString();</span><br><span class="line">        <span class="built_in">strcpy</span>(param, );</span><br><span class="line">    </span><br><span class="line">res_str = send_post(url, (<span class="keyword">char</span>*)str.c_str());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"return string is: %s"</span>, res_str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> password[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">get_ret_info(res_str, flag, password, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h2><ul><li><p>手动编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c getInfo.cpp -o getInfo.o</span><br><span class="line">g++ -o getInfo.exe -L /usr/<span class="built_in">local</span>/lib -lcurl -ljson getInfo.o</span><br></pre></td></tr></table></figure></li><li><p>自动编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#x86 complie config</span></span><br><span class="line">CC=g++</span><br><span class="line">LD=g++</span><br><span class="line">CFLAGS=-Wall -DLDAP_DEPRECATED=1 -I ./include/</span><br><span class="line"> </span><br><span class="line">ARCH=$(shell getconf LONG_BIT)</span><br><span class="line"> </span><br><span class="line">ifeq ($(DBGEN),1)</span><br><span class="line">CFLAGS += -g</span><br><span class="line">endif</span><br><span class="line"> </span><br><span class="line">ifeq ($(ARCH),32)</span><br><span class="line">LIBDIR = /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">BINDIR = ./</span><br><span class="line">CFLAGS += -Dx86</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LIBDIR = /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">BINDIR = ./</span><br><span class="line">endif</span><br><span class="line"> </span><br><span class="line">BINLIBS=-L $(LIBDIR) -lcurl -ljson</span><br><span class="line">EXENAME1=getPasswd</span><br><span class="line">DEBUG=</span><br><span class="line">EXEEXT=.exe</span><br><span class="line"> </span><br><span class="line">TARGETBIN1 = $(EXENAME1)$(DEBUG)$(EXEEXT) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">BINOBJS1 = getPasswd.o</span><br><span class="line"> </span><br><span class="line">all: $(TARGETBIN1) </span><br><span class="line"> </span><br><span class="line">.cpp.o:</span><br><span class="line">$(CC) $(CFLAGS) $(XFLAGS) -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"> </span><br><span class="line">.cpp.b:</span><br><span class="line">$(CC) $(CFLAGS) $(XFLAGS) -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"> </span><br><span class="line">$(TARGETBIN1): $(BINOBJS1)</span><br><span class="line">$(LD) -o $(BINDIR)$(TARGETBIN1) $(BINOBJS1) $(BINLIBS)</span><br><span class="line"> </span><br><span class="line">clean:</span><br><span class="line">rm -f *.o $(BINDIR)$(TARGETBIN1)</span><br></pre></td></tr></table></figure></li></ul><p># </p><h2 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h2><ol><li>安装curl:<a href="https://blog.csdn.net/makenothing/article/details/39250491" target="_blank" rel="noopener">https://blog.csdn.net/makenothing/article/details/39250491</a></li><li>安装json库：<a href="https://blog.csdn.net/makenothing/article/details/39250491" target="_blank" rel="noopener">https://blog.csdn.net/makenothing/article/details/39250491</a></li><li><a href="https://blog.csdn.net/weixin_39568041/article/details/83659649" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39568041/article/details/83659649</a></li><li><a href="https://www.cnblogs.com/chechen/p/7261607.html" target="_blank" rel="noopener">https://www.cnblogs.com/chechen/p/7261607.html</a></li><li><a href="https://blog.csdn.net/g1269420003/article/details/89349569" target="_blank" rel="noopener">https://blog.csdn.net/g1269420003/article/details/89349569</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C/C++ </tag>
            
            <tag> http </tag>
            
            <tag> json </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产Linux：中标麒麟NeoKylin——龙芯版操作系统实体机U盘安装详解</title>
      <link href="/2019/11/25/%E5%9B%BD%E4%BA%A7Linux%EF%BC%9A%E4%B8%AD%E6%A0%87%E9%BA%92%E9%BA%9FNeoKylin%E2%80%94%E2%80%94%E9%BE%99%E8%8A%AF%E7%89%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E4%BD%93%E6%9C%BAU%E7%9B%98%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/25/%E5%9B%BD%E4%BA%A7Linux%EF%BC%9A%E4%B8%AD%E6%A0%87%E9%BA%92%E9%BA%9FNeoKylin%E2%80%94%E2%80%94%E9%BE%99%E8%8A%AF%E7%89%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E4%BD%93%E6%9C%BAU%E7%9B%98%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>本文地址：<a href="https://jeffcheng95.github.io/">https://jeffcheng95.github.io/</a></strong></p><p><strong>中标麒麟操作系统下载：<a href="http://www.cs2c.com.cn/index.php?id=177" target="_blank" rel="noopener">点击这里</a></strong><br><img src="https://img-blog.csdnimg.cn/20191125162953374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为我们这里有一台龙芯实体机，所以我们就是在这个实体机上安装的 <strong>中标麒麟桌面操作系统软件（龙芯版 V7.0）</strong><br><strong>(注意：龙芯版 都必须要在指定芯片的机器上安装，不然会安装不成功！)</strong></p><a id="more"></a><h2 id="1-安装前准备"><a href="#1-安装前准备" class="headerlink" title="1.安装前准备"></a>1.安装前准备</h2><p>安装前先看看自己的机器对应的固件版本，如下图：<br><img src="https://img-blog.csdnimg.cn/20191125163838167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="对应固件表1"><br><img src="https://img-blog.csdnimg.cn/20191125163910591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="对应固件表2"><br>我所用的机器是龙芯3A台式机，所以我的安装固件方式两种都支持。按照我机器上默认的方式，我之后采用的是 <strong>昆仑固件桌面版</strong> 来进行引导的。</p><h2 id="2-制作启动盘"><a href="#2-制作启动盘" class="headerlink" title="2.制作启动盘"></a>2.制作启动盘</h2><p>因为没有光驱等原因，我选择了U盘启动的方式。<br>(1)首先确保U盘的大小不小于4G，其次制作启动盘时，保证机器上只有一个USB设备。<br>在随便一个<strong>Linux</strong>系统下插入U盘(我用的是CentOS7.3)，以超级用户权限查看当前U盘挂载的设备文件，这里我用的命令是 <strong>lsblk</strong>，查找到如图：<br><img src="https://img-blog.csdnimg.cn/20191125165137466.png" alt="lsblk结果"><br>可以看到我插入的U盘挂在<strong>/dev/sdb4</strong>这个设备文件下。<br>(2)准备格式化U盘<strong>(注意格式化前保存好数据，格式化会清空U盘内一切数据)</strong>，格式化时要将U盘格式化为<strong>ext3或ext4格式！</strong> 格式化命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3 /dev/sdc</span><br></pre></td></tr></table></figure><p>或者直接界面操作，如图：<br><img src="https://img-blog.csdnimg.cn/20191125170511596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="格式化U盘"></p><p>(3)格式化完成后，执行下述命令，制作启动盘(以下载的镜像为例 NKLD-7.0_U2-LS64-REL-B054.iso)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /mnt/iso /mnt/usb</span><br><span class="line"># mount -o loop NKLD-7.0_U2-LS64-REL-B054.iso /mnt/iso</span><br><span class="line"># mount /dev/sdb4 /mnt/usb/</span><br><span class="line"># cp /mnt/iso/ks.cfg /mnt/usb/</span><br><span class="line"># mkdir /mnt/usb/boot</span><br><span class="line"># cp /mnt/iso/boot/vmlinuz /mnt/iso/boot/initrd.img /mnt/usb/boot/</span><br><span class="line"># cp /mnt/iso/tools/USB-install/boot.* /mnt/iso/tools/USB-install/grub.cfg /mnt/usb/boot/</span><br><span class="line"># umount /mnt/iso</span><br><span class="line"># cp NKLD-7.0_U2-LS64-REL-B054.iso /mnt/usb/</span><br><span class="line"># sync</span><br><span class="line"># umount /mnt/usb/</span><br></pre></td></tr></table></figure><p>最后一步执行完后，启动盘就制作完了，完成后的界面如下：<br><img src="https://img-blog.csdnimg.cn/20191125171743529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="启动盘制作完成"></p><h2 id="3-修改启动盘的配置信息"><a href="#3-修改启动盘的配置信息" class="headerlink" title="3.修改启动盘的配置信息"></a>3.修改启动盘的配置信息</h2><p>制作完成后，还需要修改启动盘中的几个配置文件，使其符合中安装系统的机器的信息。<br>(1)首先把U盘插到最后安装系统的机器上，先用lsblk命令查看一下U盘挂载的/dev/下设备文件，比如我的龙芯机器上也是sdb4。<br>(2)然后还是在Linux中打开启动盘，需要修改以下几个文件</p><blockquote><p>/NeoKylin-Desktop/boot/boot.cfg<br>/NeoKylin-Desktop/boot/boot.conf<br>/NeoKylin-Desktop/boot/grub.cfg</p></blockquote><p>把这几个文件中的”sdb1”替换为”sdb4”,如图：<br><img src="https://img-blog.csdnimg.cn/20191125172917803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="替换路径"></p><h2 id="4-执行安装引导"><a href="#4-执行安装引导" class="headerlink" title="4.执行安装引导"></a>4.执行安装引导</h2><p>将制作修改完成的启动盘插入龙芯机器上，开机后，选择USB Install或者USB-CDROM Install，然后按键盘上“e”键进行编辑。按照下述内容编辑：</p><blockquote><p>……<br>linux /boot/vmlinuz repo=hd:/dev/sdb4:/*.iso  ks=hd:sdb4:/ks.cfg graphical quick<br>initrd /boot/initrd.img<br>boot</p></blockquote><p>编辑完成后，按下Ctrl+X，以保存退出并执行。<br>最后，就等着安装界面开始吧，一切按照默认流程就行。</p><h2 id="安装过程要特别注意的："><a href="#安装过程要特别注意的：" class="headerlink" title="安装过程要特别注意的："></a>安装过程要特别注意的：</h2><p><strong>1.要在Linux下制作。</strong><br><strong>2.PMON环境下U盘必须格式化成ext3， 昆仑固件环境下可以格式化成ext3、ext4(所以直接格式化成ext3就好)，将卷标设置为“NeoKylin-Desktop”。</strong><br><strong>3.在安装机器上U盘的位置不一定为sdb1，可以通过”ls /dev/sd*”命令仔细查看。</strong></p><h2 id="安装之后的界面："><a href="#安装之后的界面：" class="headerlink" title="安装之后的界面："></a>安装之后的界面：</h2><p><img src="https://img-blog.csdnimg.cn/20191125174607924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1a25vdw==,size_16,color_FFFFFF,t_70" alt="安装成功"></p><h3 id="参考：官方资料"><a href="#参考：官方资料" class="headerlink" title="参考：官方资料"></a>参考：<a href="https://max.book118.com/html/2018/0825/6043122121001213.shtm" target="_blank" rel="noopener">官方资料</a></h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> NeoKylin安装 </tag>
            
            <tag> 国产操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++:字符串比较——区分大小写和不区分大小</title>
      <link href="/2019/10/28/C-C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E2%80%94%E2%80%94%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E5%92%8C%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F/"/>
      <url>/2019/10/28/C-C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E2%80%94%E2%80%94%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E5%92%8C%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="C-C-字符串比较——区分大小写和不区分大小写"><a href="#C-C-字符串比较——区分大小写和不区分大小写" class="headerlink" title="C/C++ 字符串比较——区分大小写和不区分大小写"></a>C/C++ 字符串比较——区分大小写和不区分大小写</h1><p>在C/C++码农生涯，不可避免要使用字符串比较函数，比如匹配路径等需求。这篇文章将介绍字符串比较中区分大小写和不区分大小写所使用的函数。</p><a id="more"></a><h1 id="一、区分大小写"><a href="#一、区分大小写" class="headerlink" title="一、区分大小写"></a>一、区分大小写</h1><p>一般我们常用的字符串比较函数都是区分大小写的。<br>我们这里只介绍<strong>strcmp</strong>函数，在windows和linux下函数名和用法都一样。</p><blockquote><p>原型：extern int strcmp(const void *s1, const void *s2);<br>功能：用于比较两个字符串并根据比较结果返回整数。<br>用法：基本形式为strcmp(str1,str2)，若str1=str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syslib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s1=<span class="string">"Hello,Programmers!"</span>;</span><br><span class="line"><span class="keyword">char</span> *s2=<span class="string">"Hello,programmers!"</span>;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line">clrscr();</span><br><span class="line">r = <span class="built_in">strcmp</span>(s1,s2);</span><br><span class="line"><span class="keyword">if</span>(!r)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"s1 and s2 are identical"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"s1 less than s2"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"s1 greater than s2"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、不区分大小写"><a href="#二、不区分大小写" class="headerlink" title="二、不区分大小写"></a>二、不区分大小写</h1><p>不区分大小写的函数，在windows和linux平台下不一样。</p><h2 id="1、Windows平台下的stricmp"><a href="#1、Windows平台下的stricmp" class="headerlink" title="1、Windows平台下的stricmp"></a>1、Windows平台下的stricmp</h2><blockquote><p>原型：extern int stricmp(char <em>s1,char * s2);<br>功能：(*</em>不区分大小写**) 比较两个字符串并根据比较结果返回整数。<br>用法：与strcmp一样， stricmp(str1, str2);</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str1=<span class="string">"I am OldWolf"</span>;</span><br><span class="line"><span class="keyword">char</span> *str2=<span class="string">"I am Oldwolf"</span>;</span><br><span class="line"><span class="keyword">int</span> cmp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原字符串分别为：\n%s\n%s\n\n"</span>,str1,str2);</span><br><span class="line">cmp=stricmp(str1,str2);</span><br><span class="line"><span class="keyword">if</span> (cmp!=<span class="number">0</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"stricmp比较字符串不相同！\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"stricmp比较字符串相同！\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Linux平台下的strcasecmp"><a href="#2、Linux平台下的strcasecmp" class="headerlink" title="2、Linux平台下的strcasecmp"></a>2、Linux平台下的strcasecmp</h2><blockquote><p>原型： int strcasecmp (const char <em>s1, const char <em>s2);<br>功能：(</em></em>不区分大小写**) 比较两个字符串并根据比较结果返回整数。<br>用法：与strcmp一样， strcasecmp(str1, str2);</p></blockquote><p>示例：</p><pre><code class="C++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><span class="function"></span>{    <span class="keyword">char</span> *a=<span class="string">"aBcDeF"</span>;    <span class="keyword">char</span> *b=<span class="string">"AbCdEf"</span>;    <span class="keyword">if</span>(!strcasecmp(a,b))        <span class="built_in">printf</span>(<span class="string">"%s=%s/n"</span>,a,b);    <span class="keyword">return</span> <span class="number">0</span>;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C/C++ </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行单例应用-文件锁方式.md</title>
      <link href="/2019/10/24/%E8%BF%90%E8%A1%8C%E5%8D%95%E4%BE%8B%E5%BA%94%E7%94%A8-%E6%96%87%E4%BB%B6%E9%94%81%E6%96%B9%E5%BC%8F-md/"/>
      <url>/2019/10/24/%E8%BF%90%E8%A1%8C%E5%8D%95%E4%BE%8B%E5%BA%94%E7%94%A8-%E6%96%87%E4%BB%B6%E9%94%81%E6%96%B9%E5%BC%8F-md/</url>
      
        <content type="html"><![CDATA[<h1 id="应用单例启动（采用文件锁方式）"><a href="#应用单例启动（采用文件锁方式）" class="headerlink" title="应用单例启动（采用文件锁方式）"></a>应用单例启动（采用文件锁方式）</h1><hr><p>有时候我们的应用程序在系统中可能只允许<strong>启动一个</strong>(比如服务程序)，怎么实现这种需求呢？</p><a id="more"></a><p><strong>思想</strong>：我们可以采用文件锁的方式，因为通过文件锁，可以保证同一时刻只有一个应用能占得文件资源，获取锁成功的可以执行，如果被其他进程占用时就不能执行。</p><p><strong>准备</strong>：有了思路后，剩下就是怎么操作设置文件锁了。用到网络锁，就不可避免要使用<a href="https://baike.baidu.com/item/fcntl/6860021?fr=aladdin" target="_blank" rel="noopener">fcntl</a>函数。</p><blockquote><ul><li>fcntl函数，调用可以用来对已打开的文件描述符进行各种控制操作以改变已打开文件的的各种属性</li><li>fcntl函数介绍如下：<br><img src="http://s1.knowsky.com/20170227/1zx2pe0xx1o55.png" alt="fcntl函数"></li></ul><p>fcntl的返回值与命令有关。如果出错，所有命令都返回-1，同时错误码记录在errno中；如果成功则返回某个其他值。下列四个命令有特定返回值：F_DUPFD、F_GETFD、F_GETFL、F_GETOWN.第一个返回新的文件描述符，接下来的两个返回相应标志，最后一个返回一个正的进程ID或负的进程组ID。<br>上述我们用到的是<strong>F_SETLK</strong>。如果<strong>锁被其他进程占用</strong>导致无法设定锁，则返回-1，errno错误代码为<strong>EACCES</strong>或<strong>EAGAIN</strong>。<br>当fcntl用于管理文件记录锁的操作时，第三个参数指向一个struct flock *lock的结构体，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct flock</span><br><span class="line">&#123;</span><br><span class="line">    l_type;    /*锁的类型*/</span><br><span class="line">    l_whence;  /*偏移量的起始位置：SEEK_SET,SEEK_CUR,SEEK_END*/</span><br><span class="line">    l_start;     /*加锁的起始偏移*/</span><br><span class="line">    l_len;    /*上锁字节*/</span><br><span class="line">    l_pid;   /*锁的属主进程ID */</span><br><span class="line">&#125;; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="http://s1.knowsky.com/20170227/sjygkkw2x5y55.png" alt="flock结构体"></p><p>如果要加锁整个文件，通常的方法是将l_start 设置为0，l_whence 设置为SEEK_SET,l_len设置为0.</p></blockquote><p><strong>实现</strong>:基本的一些知识清楚了之后，就要写代码实现了，下面的代码是我写的一个小demo。<br>主要部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct flock flc;</span><br><span class="line">flc.l_type = F_WRLCK;  // write lock</span><br><span class="line">flc.l_start = 0;</span><br><span class="line">flc.l_whence = SEEK_SET;</span><br><span class="line">flc.l_len = 0;   //lock the whole file</span><br><span class="line">if(fcntl(fd, F_SETLK, &amp;flc) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if(errno == EACCES || errno == EAGAIN)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;This process already exist!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">perror(&quot;Set FileLock Failed!&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;Process will run!\n&quot;);</span><br></pre></td></tr></table></figure><p>代码地址：<a href="https://github.com/JeffCheng95/C-C-Demo/tree/master/%E5%BA%94%E7%94%A8%E5%8D%95%E4%BE%8B%E8%BF%90%E8%A1%8C" target="_blank" rel="noopener">https://github.com/JeffCheng95/C-C-Demo/tree/master/应用单例运行</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应用单例运行 </tag>
            
            <tag> 文件锁 </tag>
            
            <tag> fcntl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux：解决应用程序/动态库中与加载的其他动态库的函数重名问题</title>
      <link href="/2019/10/22/Linux%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%AD%E4%B8%8E%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E5%90%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/22/Linux%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%AD%E4%B8%8E%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E5%87%BD%E6%95%B0%E9%87%8D%E5%90%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux：解决应用程序-动态库中与加载的其他动态库的函数-重名问题"><a href="#Linux：解决应用程序-动态库中与加载的其他动态库的函数-重名问题" class="headerlink" title="Linux：解决应用程序/动态库中与加载的其他动态库的函数 重名问题"></a>Linux：解决应用程序/动态库中与加载的其他动态库的函数 重名问题</h1><h4 id="问题-："><a href="#问题-：" class="headerlink" title="问题 ："></a>问题 ：</h4><p>今天客户提出来一个大问题，Linux版本的一段程序，显示正常的pdf在识别的时候，程序崩了，这个不应该啊。就算pdf是坏的，那也应该有错误码，而不应该崩掉啊。  </p><a id="more"></a><p>在复现的过程中，gdb调试发现，在我们的动态库A.so中有个接口叫F_Recg()，我们调用的底层还有个用的别人提供的动态库B.so，其中有个函数也叫F_Recg()，最终的问题就是<strong>本应该进入A.so中F_Recg()程序进入到了B.so中的F_Recg()了</strong>。    </p><p>别人的动态库我们也不能改，只能我们自己想办法看看怎么指定的调用我们A.so中的函数了。  </p><p>刚开始尝试了<strong>visibility</strong>(visibility用于设置动态链接库中函数的可见性，将变量或函数设置为hidden，则该符号仅在本so中可见，在其他库中则不可见；若设置为default,则在其他库中也可见。使用方法参见：<a href="https://blog.csdn.net/buknow/article/details/102629221" target="_blank" rel="noopener">visibility</a>)但是没有效果。<br>所幸后来在同事大佬的帮助下，我们找到了一种gcc编译选项的方法：</p><blockquote><p>-Wl,-Bsymbolic    （不要少逗号）<br>这个是在gcc/g++编译的一个选项，其中<strong>Wl</strong>表示将紧跟其后的参数，传递给连接器ld。<strong>Bsymbolic</strong>表示强制采用本地的全局变量定义，这样就不会出现动态链接库的全局变量定义被应用程序/动态链接库中的同名定义给覆盖了！</p></blockquote><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>添加gcc / g++编译选项： -Wl,-Bsymbolic     </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C/C++ </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md文件在github上不能正确换行</title>
      <link href="/2019/09/29/%C2%96md%E6%96%87%E4%BB%B6%E5%9C%A8github%E4%B8%8A%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E6%8D%A2%E8%A1%8C-md/"/>
      <url>/2019/09/29/%C2%96md%E6%96%87%E4%BB%B6%E5%9C%A8github%E4%B8%8A%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E6%8D%A2%E8%A1%8C-md/</url>
      
        <content type="html"><![CDATA[<h1 id="md文件在github上不能正确换行"><a href="#md文件在github上不能正确换行" class="headerlink" title="md文件在github上不能正确换行"></a>md文件在github上不能正确换行</h1><h4 id="问题-："><a href="#问题-：" class="headerlink" title="问题 ："></a>问题 ：</h4><p>使用md文件编辑一整段内容，在编辑器中正常显示<br>但上传github后，文档没有正确显示换行   </p><a id="more"></a> <blockquote><h1 id="MacCpuIDInfoTool"><a href="#MacCpuIDInfoTool" class="headerlink" title="MacCpuIDInfoTool"></a>MacCpuIDInfoTool</h1><h3 id="特定场景应用：机器及授权信息查看工具"><a href="#特定场景应用：机器及授权信息查看工具" class="headerlink" title="特定场景应用：机器及授权信息查看工具"></a>特定场景应用：机器及授权信息查看工具</h3><p><strong>功能描述</strong>：本MFC项目为读取特定机器码文件和授权信息文件加解密小工具，运用的是openssl开源库。<br><strong>目录结构</strong>：<br>　|—-<strong>include</strong>：项目所需的openssl开源库头文件<br>　|—-<strong>lib32</strong>：项目依赖的openssl静态库文件(32位)<br>　|—-<strong>lib64</strong>：同上(64位)<br>　|—-<strong>res</strong>：应用程序的图标等资源文件<br>　|—-<strong>Test</strong>：提供的测试文件<br>　|　　　|—-GetLicenseInfo：机器码文件<br>　|　　　|—-LicenceFile：授权信息文件<br>　|—-<strong><em>.cpp/ \</em>.h/ *.vcxproj</strong>：源文件、头文件、项目文件等</p></blockquote><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>github上需要在每一行末尾加上至少2个空格，再输入换行，不然换行不能正确显示    </p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在需要换行的每一句后面加上两个空格，再使用换行即可。   </p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown语法 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+NexT博客主题优化：在文章底部增加作者版权信息</title>
      <link href="/2019/09/23/hexo%E4%BC%98%E5%8C%96-%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/"/>
      <url>/2019/09/23/hexo%E4%BC%98%E5%8C%96-%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-NexT博客主题优化：在文章底部增加作者版权信息"><a href="#Hexo-NexT博客主题优化：在文章底部增加作者版权信息" class="headerlink" title="Hexo+NexT博客主题优化：在文章底部增加作者版权信息"></a>Hexo+NexT博客主题优化：在文章底部增加作者版权信息</h1><hr><h4 id="实现效果图："><a href="#实现效果图：" class="headerlink" title="实现效果图："></a>实现效果图：</h4><p><img src="https://img-blog.csdnimg.cn/20190923152754830.jpg#pic_center" alt="版权信息"></p><a id="more"></a><h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><blockquote><p>1、 在主题目录 <code>next/layout/_macro/</code> 下，新增文件<code>my-copyright.swig</code> ，填入以下内容：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.my_copyright.enabled %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"my_post_copyright"</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span><br><span class="line">------ 版权声明 ------&lt;/div&gt;</span><br><span class="line"> &lt;script src=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"> &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"> &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(<span class="string">"YYYY年MM月DD日 - HH:mm"</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"> &lt;p&gt;&lt;span&gt;最后更新:&lt;/</span>span&gt;&#123;&#123; page.updated.format(<span class="string">"YYYY年MM月DD日 - HH:mm"</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"> &lt;p&gt;&lt;span&gt;原始链接:&lt;/</span>span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"copy-path"</span>  title=<span class="string">"点击复制文章链接"</span>&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;"  aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line"> &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"> &lt;p&gt;&lt;span&gt;许可协议:&lt;/</span>span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">   <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.fa-clipboard'</span>);</span><br><span class="line">   $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       swal(&#123;   </span><br><span class="line">         title: <span class="string">""</span>,   </span><br><span class="line">         text: <span class="string">'复制成功'</span>,</span><br><span class="line">         icon: <span class="string">"success"</span>, </span><br><span class="line">         showConfirmButton: <span class="literal">true</span></span><br><span class="line">         &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">   &#125;);  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2、在主题目录 <code>next/source/css/_common/components/post/</code> 下，新增文件<code>my-post-copyright.styl</code> ，填入以下内容：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line"> <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line"> <span class="attribute">word-break</span>: break-all;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: inline-block;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line"> <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line"> +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3、修改<code>next/layout/_macro/post.swig</code>，在代码<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-footer"</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这段代码第一次出现之前的地方，添加如下代码段：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">     &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">       &#123;% include <span class="string">'my-copyright.swig'</span> %&#125;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4、修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5、在主题配置文件<code>_config.yml</code>中添加字段<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“版权声明”标记</span><br><span class="line">my_copyright:</span><br><span class="line"> enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 6、完成以上设置之后，执行命令保存重新生成<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure></p></blockquote><p>以上就是添加“版权声明”的所有步骤了，有问题记得一起交流，喜欢的老铁记得双击666！😀</p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT主题优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmd Markdown 向导</title>
      <link href="/2019/09/18/example_md/"/>
      <url>/2019/09/18/example_md/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。</p><a id="more"></a><p>您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuenlidWx1by5jb20vc3RhdGljL2ltZy9sb2dvLnBuZw?x-oss-process=image/format,png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input checked disabled type="checkbox"> 新增 Todo 列表功能</li><li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuenlidWx1by5jb20vc3RhdGljL2ltZy90b29sYmFyLWVkaXRvci5wbmc?x-oss-process=image/format,png" alt="tool-editor"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuenlidWx1by5jb20vc3RhdGljL2ltZy90b29sYmFyLW1hbmFnZXIuanBn?x-oss-process=image/format,png" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuenlidWx1by5jb20vc3RhdGljL2ltZy90b29sYmFyLXJlYWRlci5qcGc?x-oss-process=image/format,png" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuenlidWx1by5jb20vc3RhdGljL2ltZy9maWxlLWxpc3QucG5n?x-oss-process=image/format,png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日    </p><p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO下载安装与配置详解</title>
      <link href="/2019/09/18/first-blog/"/>
      <url>/2019/09/18/first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-Github搭建免费个人博客"><a href="#使用-Hexo-Github搭建免费个人博客" class="headerlink" title="使用 Hexo+Github搭建免费个人博客"></a>使用 Hexo+Github搭建免费个人博客</h1><hr><p>参考资料：</p><p>Hexo下载安装——<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br>主题NexT——<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a><br>Hexo攻略-添加分类和标签——<a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">https://www.jianshu.com/p/e17711e44e00</a><br>Hexo插件-百度数据分析——<a href="https://tongji.baidu.com/web/10000065783/homepage/index" target="_blank" rel="noopener">https://tongji.baidu.com/web/10000065783/homepage/index</a></p><p>本人博客预览——JeffCheng95.github.io</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/18/hello-world/"/>
      <url>/2019/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
